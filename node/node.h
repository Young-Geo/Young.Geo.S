#ifndef __H_NODE_H__
#define __H_NODE_H__
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
#include "global.h"
#include <sys/time.h>
////////////////////////////////////////////////////////////////////////////
#define ARGLIST_MAX 256
#define INOUT_TIMEOUT 30000
#define SELECT_TIMEOUT 500
#define SUB_CONNECT_TIMEOUT 10
#define SUB_CONNECT_SUM_TIMEOUT (30 * 1000)
////////////////////////////////////////////////////////////////////////////
typedef struct _pub_t
{
  int listenfd , port , fd ;
  
  xlist * arglist ;
  int arglist_size ;
  
  simple_buffer_t outbuffer ;
  int out_timestamp ;
  
  void * obj ;
  int (* callback) (void * node, void * obj , int fd) ;
} pub_t ;
typedef struct _sub_t
{
  int port , fd , fd_connecting , fd_connecting_time_start , fd_connecting_timeout_ms , fd_connecting_timeout_sum_ms ;
  
  simple_buffer_t inbuffer ;
  int in_timestamp ;
  
  int (* callback) (void * node , void * obj , argv_t * argv) ;
  void * obj ;
} sub_t ;
typedef struct _device_t
{
  char device[MINBUFFER_SIZE] ;
  int fd ;
  
  void * obj ;
  int (* init_callback) (char * path, void * obj) ;
  int (* active_callback) (void * node, void * obj , int fd) ;
} device_t ;
typedef struct _node_timer_t
{
  int ms ;
  int (* callback) (void * node , void * obj) ;
  void * obj ;
} node_timer_t ;
typedef struct _node_t
{
  char name [ MINBUFFER_SIZE ] ;
  int select_timeout_ms ;
  
  int cache_pub_port ;
  pub_t * cache_pub_ref ;
  
  xlist * subs ;
  xlist * pubs ;
  node_timer_t timer ;
  device_t device ;
} node_t ;
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
node_t * node_init ( char * name ) ;
void node_free ( node_t ** pn ) ;
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
int node_init_timer ( node_t * n , int ms , void * obj , int (* callback) (void * node , void * obj) ) ;
int node_free_timer ( node_t * n ) ;
int node_reset_timer ( node_t * n , int ms ) ;

int node_init_device (node_t * n , char * device_path , void * obj ,
                      int (* init_callback) (char * path, void * obj) ,
                      int (* active_callback) (void * node, void * obj , int fd) ) ;
int node_add_sub ( node_t * n , int port , void * obj , int (* callback) (void * node , void * obj , argv_t * argv)) ;
int node_add_pub ( node_t * n , int port , void * obj , int (* callback) (void * node, void * obj , int fd)) ;
////////////////////////////////////////////////////////////////////////////
int node_pub ( node_t * n , int port , argv_t * argv , int do_free) ;
int node_spin (node_t * n) ;
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
#endif
